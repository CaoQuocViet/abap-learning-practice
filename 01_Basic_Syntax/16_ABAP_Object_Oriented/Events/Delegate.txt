Delegate

1. Công thức #1:
DATA TYPE	| VALUE -> VARIABLE
		| VALUE -> VARIABLE
		| VALUE -> VARIABLE
		| VALUE -> VARIABLE
		| VALUE -> VARIABLE

2. Công thức #2:
int yob = 2003;
int currentYear = 2024;
Student s1 = new Student("SE1", "AN NGUYEN", 2023, 8.6);
Student s2 = new Student(id: "SE1", name: "AN NGUYEN", yob: 2003, gpa: 8.6);
Student s3 = new Student() {id: "SE1", name: "AN NGUYEN", yob: 2003, gpa: 8.6};

=> Hiểu được Delegate từ đó sẽ hiểu được các khái niệm liên quan phía sau:
		- Lập trình hàm - Func programming
		- Dependency injection
		- LINQ
		- Anonymous Func, Lambda Expression
		- Callback Func

Class name là danh từ chung (Data type), Object name là danh từ riêng (Variable)

Delegate là các đặc tên nhóm cho một đám dữ liệu/ value phức tạp, class name, có thể dùng như value

Đám value phức tạp này chưa được định nghĩa, lạ hoắc, cần đi tìm data type cho tụi nó

Nhìn vào source code (data + method, biến/ dữ liệu và hàm): 4 loại hàm
+ void A();
+ void B(int n);
+ int C();
+ int D(int m);

==> Đặt tên nhóm cho các hàm đồng dạng / cùng cấu trúc, giống định dạng, cùng style: In/output --> Hàm được xem là value (kiểu hàm là type) --> có quyền truyền hàm vào hàm khác qua parameter --> Func program, callback Func

Đặt tên 4 loại hàm (type) làm sao để biểu thị được nghĩa về giá trị mà nó mang (vd: int, float, double, bool...):
+ Không vào không ra	--> delegate void A(); // Cách dặt tên cho 1 nhóm hàm (value) mà k vào k ra
+ Có vào không ra	--> delegate void B(int n);
+ Không vào có ra	--> delegate int C();
+ Có vào có ra		--> delegate int D(int m);

==> Được dùng A, B, C, D như là mọi data type truyền thống khác (elementary, structure, object, complex...)

delegate void X() // Type

X f1 = SayHello(); // Type variable = value

--> f1 là 1 cái hàm có style X, có giá trị là cái hàm SayHello()
--> f1 được gọi là con trỏ hàm (Func Pointer) vì nó = hoặc trỏ đến 1 hàm cụ thể